'use strict';

/**
 * @ngdoc function
 * @name frontApp.controller:GruposTareasCtrl
 * @description
 * # GruposTareasCtrl
 * Controlador de la parte "grupos de tareas"
 */
angular.module('frontApp')
	.controller('GruposTareasCtrl', function ($scope, $http, $routeParams, clientService, $location, $timeout) {
		
		$scope.mostrarTabla = false;						// Flag para mostrar la tabla de resultados.
		$scope.mode = 'list';								// Modo de la página.
		//$scope.item = {										// Item a editar / borrar.
		//		id: null,
		//		nombre: '',
		//		descripcion: '',
		//		arquitecturas: []
		//};									
		$scope.itemIndex = -1;								// Índice del ítem con el que se está trabajando.
		$scope.newLegend = '';								// Legend del apartado nuevo / editar.
		$scope.actionResult = '';							// Mensaje con el resultado de las acciones realizadas (correcto, errores).
		$scope.combos = {									// Contenido de los desplegables.
				arquitecturas: null,
				items: null,
				complejidades: null,
				tamanios: null,
				buscarItems: null
		};
		$scope.comboModels = {								// Modelos de los desplegables
					arquitectura: {},
					item: {},
					complejidad: {},
					tamanio: {}
		};
		
		
		/* Se hace un watch sobre clientService.actionResult para 
		 * tener en el scope siempre el resultado de las acciones disponible. */
		$scope.$watch(function(){
						return clientService.actionResult;
					},
					function(newVal, oldVal){
						if (newVal !== oldVal)
							$scope.actionResult = clientService.actionResult;
					}
				);
		
		/* Cuando se cambia la ruta se recoge el item con el que estamos trabajando */
		$scope.$on('$routeChangeSuccess', function(event, next, current){
			if ( next.$$route.mode == 'edit' ){
					$scope.item = clientService.data[next.params.idx];
					$scope.newLegend = 'Edición de grupo de tareas';
			} else if ( next.$$route.mode == 'new' ){
					$scope.item = null;
					$scope.newLegend = 'Alta de grupo de tareas';
			}
			/* Se actualiza el modo */
			$scope.mode = next.$$route.mode;
		});
		
		/* Al abandonar la página de búsqueda se debe eliminar el mensaje 'actionResult' */
		$scope.$on('$routeChangeStart', function(event, next, current){
			if ($scope.mode == 'list')
				clientService.actionResult = '';
		});
		
		/****************************************************/
		/*		ELEMENTOS DE LOS DESPLEGABLES				*/
		/****************************************************/
		var combos = {
				arquitecturas: (function(){

					/* Petición al servidor */
					$http({
						method: 'POST',
						data: {},
						url: '/api/arquitectura/obtenerArq'
					})
					
					/* Petición correcta */
					.then(function successCallback(response){
						$scope.combos.arquitecturas = response.data;
						$scope.combos.buscarItems = combos.items;

						/* Petición incorrecta */
					}, function errorCallback(response){
						$scope.combos.arquitecturas = null;
					})
				})(),
				
				items: function(){
					
					/* Petición */
					$http({
						method: 'POST',
						
						/* Se pasa como parámetro el id de la arquitectura seleccionada */
						data: {arquitectura: {id: $scope.comboModels.arquitectura.id}},
						url: '/api/item/obtenerItems'
					})
					
					/* Petición correcta */
					.then(function successCallback(response){
						$scope.combos.items = response.data;
						
						/* Petición incorrecta */
					}, function errorCallback(response){
						$scope.combos.items = null;
					})
					
				},
				complejidades: (function(){
					
					/* Petición al servidor */
					$http({
						method: 'POST',
						data: {},
						url: '/api/complejidad/obtenerComplejidades'
					})
					
					/* Petición correcta */
					.then(function successCallback(response){
						$scope.combos.complejidades = response.data;
						
						/* Petición incorrecta */
					}, function errorCallback(response){
						$scope.combos.complejidades = null;
					})
				})(),
				tamanios: (function(){
					
					/* Petición al servidor */
					$http({
						method: 'POST',
						data: {},
						url: '/api/tamanio/obtenerTamanios'
					})
					
					/* Petición correcta */
					.then(function successCallback(response){
						$scope.combos.tamanios = response.data;
						
						/* Petición incorrecta */
					}, function errorCallback(response){
						$scope.combos.tamanios = null;
					})
				})()
		};
		
		/****************************************************/
		/*		BÚSQUEDA / LISTADO							*/
		/****************************************************/
		
		/* Hace la llamada al servidor y recoge los datos */
		$scope.buscar = function(){
			
			/* Se hace la petición al servidor con el objeto de búsqueda */
			$http({
				method: 'POST',
				data: $scope.comboModels,
				url: '/api/grupoTarea/obtenerGrupoTareas'
			}) 

			/* Petición correcta */
			.then(function successCallback(response){
				$scope.resultados = response.data;
				clientService.data = response.data;
				
				/* Se muestra la tabla de resultados */
				$scope.mostrarTabla = true;

			/* Petición incorrecta */
			}, function errorCallback(response){
				clientService.actionResult = '<div class="alert alert-danger"><p>No se ha podido realizar búsqueda.</p>';
				clientService.actionResult += '<p>Error ' + response.data[0].errorCode + ': ' + response.data[0].errorMsg + '</p></div>';
			})
			.finally(function(){
				$scope.termino = '';
				resetComboModel();
			});
		};
		
		/****************************************************/
		/*		EDICIÓN										*/
		/****************************************************/

		$scope.editar = function(index){
			
			//$http.put('/api/cliente/actualizarCliente', $scope.item)
			$http({
				method: 'PUT',
				data: $scope.item,
				url: '/api/grupoTarea/actualizarGrupoTarea'
			})
			
			/* Se definen los mensajes a mostrar */
			.then(function successCallback(response){
				clientService.actionResult = '<div class="alert alert-success"><p>Edición llevada a cabo con éxito.</p></div>';
			}, function errorCallback(response){
				clientService.actionResult = '<div class="alert alert-danger"><p>No se ha podido realizar la edición del cliente.</p>';
				clientService.actionResult += '<p>Error ' + response.data[0].errorCode + ': ' + response.data[0].errorMsg + '</p></div>';
			})
			.finally(function(){
				/* Se vacía el array de resultados de la búsqueda realizada inicialmente */
				clientService.data = [];
				
				/* Se redirecciona a la página principal. */
				$location.path('/clientes');
				resetComboModel();
			});
		};
		
		
		/****************************************************/
		/*		BORRADO										*/
		/****************************************************/
		
		/* Abre el cuadro de diálogo de confirmación del borrado */
		$scope.borrar = function(index){
			$scope.item = clientService.data[index];
			$scope.itemIndex = index;
			$('#deleteDialog').modal();
		};
		
		/* Elimina el elemento indicado previamente en borrar() */
		$scope.confirmarBorrar = function(){
			$http({
				method: 'DELETE',
				data: $scope.item,
				url: '/api/grupoTarea/eliminarGrupoTarea'
			})
			
			/* Se definen los mensajes a mostrar */
			.then(function successCallback(response){
				clientService.data.splice($scope.itemIndex, 1);
				clientService.actionResult = '<div class="alert alert-success"><p>Baja llevada a cabo con éxito.</p></div>';
				$timeout(function(){$scope.$apply();});
			}, function errorCallback(response){
				clientService.actionResult = '<div class="alert alert-danger"><p>No se ha podido eliminar el cliente.</p>';
				clientService.actionResult += '<p>Error ' + response.data[0].errorCode + ': ' + response.data[0].errorMsg + '</p></div>';
			})
			.finally(function(){
				$('#deleteDialog').modal('hide');
				resetComboModel();
			});
		}
		
		/****************************************************/
		/*		ALTA										*/
		/****************************************************/
		/* Ejecuta el alta de un nuevo elemento */
		$scope.alta = function(){
			$http({
				method: 'POST',
				data: $scope.comboModels,
				url: '/api/grupoTarea/crearGrupoTarea'
			})
			
			/* Se definen los mensajes a mostrar */
			.then(function successCallback(response){
				clientService.actionResult = '<div class="alert alert-success"><p>Alta llevada a cabo con éxito.</p></div>';
			}, function errorCallback(response){
				clientService.actionResult = '<div class="alert alert-danger"><p>No se ha podido realizar el alta del cliente.</p>';
				clientService.actionResult += '<p>Error ' + response.data[0].errorCode + ': ' + response.data[0].errorMsg + '</p></div>';
			})
			.finally(function(){
				resetComboModel();
				
				/* Se vacía el array de resultados de la búsqueda realizada inicialmente */
				clientService.data = [];
				
			});
		};
		
		/* Resetea el objeto */
		function resetComboModels(){
			$scope.comboModels = {								// Modelos de los desplegables
					arquitectura: {},
					item: {},
					complejidad: {},
					tamanio: {}
			};
		}
	})
	
	/* Se crea un servicio para mantener ciertos datos en todo el proceso */
	.factory('clientService', function(){
		var service = {
				data: [],
				actionResult: ''
		};
		return service
	});